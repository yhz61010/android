[versions]
#===================
#===== Project =====
#===================
compile-sdk = "36"
min-sdk = "25"
target-sdk = "36"
ndk-sdk = "25.2.9519653"

leo-version = "5.12.52"

#===================
#===== Compile =====
#===================
agp = "8.10.0"
kotlin = "2.1.21"
ksp = "2.1.21-2.0.1"
#kotlin-language = "2.1"
#kotlin-api = "2.1"

javaVersion = "17"
jvmVersion = "17"

#=================================
#===== Android dependencies ======
#=================================
coroutines = "1.10.2"
material = "1.12.0"
appcompat = "1.7.0"
activity-ktx = "1.10.1"
fragment-ktx = "1.8.7"
core-ktx = "1.16.0"
multidex = "2.0.1"
preference = "1.2.1"
recyclerview = "1.4.0"
constraintlayout = "2.2.1"
coordinatorlayout = "1.3.0"
navigation = "2.9.0"
concurrent-futures-ktx = "1.2.0"
lifecycle = "2.9.0"
android-annotation = "4.1.1.4"
androidx-annotation = "1.9.1"
#android-support-annotation = "28.0.0"
cardview = "1.0.0"
viewpager2 = "1.1.0"
swiperefreshlayout = "1.1.0"
room = "2.7.1" # 2.4.2 has compilation error with Kotlin 1.7.0
camera = "1.4.2"
exifinterface = "1.4.1"

#===========================
#===== Android Compose =====
#===========================
compose = "1.8.2"
androidx-activity-compose = "1.10.1"
#compose-compilerextension = "1.2.0"

#=======================
#===== Third party =====
#=======================
detekt = "1.23.8"
dokka = "1.7.10"
# ktlint = "0.49.0"
ktlint-gradle = "12.1.2"
benmanes = "0.52.0"
#vcu = "0.7.0"
jacoco = "0.8.13"
# The version should be the same as server.
sonarqube = "6.2.0.5505"

coil = "2.7.0"
glide = "4.16.0"
glide-transformations = "4.3.0"
square-okhttp = "4.12.0"
square-retrofit2 = "2.11.0"
square-moshi = "1.12.0"
rxjava2 = "2.2.21"
rxjava2-android = "2.1.1"
rxjava3 = "3.1.5"
rxjava3-android = "3.0.0"
gson = "2.12.1"
eventbus = "3.3.1"
mars-xlog = "1.2.6"
karn-notify = "1.4.0"
mmkv = "2.2.2"
# 2.15.0+ Build with error "Unsupported class file major version 63"
# https://github.com/FasterXML/jackson-core/issues/955
fasterxml = "2.18.2" # 2.14.3
xx-permissions = "21.3"
bson = "2.15.1" # As of 2.13.0, you need to add fasterxml jackson manually.
free-reflection = "3.2.2"
flyco-tablayout = "2.2.0"
srl = "2.0.5"
netty = "4.1.108.Final"
koin = "4.0.0"
bytedeco-ffmpeg = "7.1-1.5.11"
bytedeco-javacpp = "1.5.11"
material-dialogs = "3.3.0"
android-animations = "2.4"
java-mail = "1.6.7"
jzlib = "1.1.3"
androidasync = "3.1.0"
net = "3.7.0"
subsampling-scale-image-view = "3.10.0"
mannodermaus-android-junit5 = "1.12.2.0"
mannodermaus-junit5 = "1.7.0"

#================
#===== Test =====
#================
jupiter = "5.12.2" # JUnit 5
androidx-test = "1.6.1"
androidx-test-runner = "1.6.2"
androidx-test-ext = "1.2.1"
espresso-core = "3.6.1"
kluent = "1.73"
mockk = "1.14.2"
arch = "2.2.0"
powermock-version = "2.0.9"
robolectric-version = "4.14.1"

#===================#===================#===================#===================
#===================#===================#===================#===================
#===================#===================#===================#===================

[libraries]
#===================
#===== Compile =====
#===================
# agp = { module = "com.android.tools.build:gradle", version.ref = "agp" }
# kgp = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlin-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }

#===================
#===== Android =====
#===================
android-material = { module = "com.google.android.material:material", version.ref = "material" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "core-ktx" }
androidx-activity = { module = "androidx.activity:activity-ktx", version.ref = "activity-ktx" }
androidx-fragment = { module = "androidx.fragment:fragment-ktx", version.ref = "fragment-ktx" }
androidx-multidex = { module = "androidx.multidex:multidex", version.ref = "multidex" }
android-annotation = { module = "com.google.android:annotations", version.ref = "android-annotation" }
#android-support-annotation = { module = "com.android.support:support-annotations", version.ref = "android-support-annotation" }
androidx-annotation = { module = "androidx.annotation:annotation", version.ref = "androidx-annotation" }
androidx-preference = { module = "androidx.preference:preference-ktx", version.ref = "preference" }
androidx-swiperefreshlayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version.ref = "swiperefreshlayout" }
androidx-concurrent-futures-ktx = { module = "androidx.concurrent:concurrent-futures-ktx", version.ref = "concurrent-futures-ktx" }
androidx-navigation-fragment = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigation" }
androidx-navigation-ui = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigation" }
androidx-constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintlayout" }
androidx-coordinatorlayout = { module = "androidx.coordinatorlayout:coordinatorlayout", version.ref = "coordinatorlayout" }
androidx-recyclerview = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerview" }
androidx-cardview = { module = "androidx.cardview:cardview", version.ref = "cardview" }
androidx-viewpager2 = { module = "androidx.viewpager2:viewpager2", version.ref = "viewpager2" }
# CameraX core library
androidx-camera-core = { module = "androidx.camera:camera-core", version.ref = "camera" }
# CameraX Camera2 extensions
androidx-camera-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "camera" }
androidx-camera-video = { module = "androidx.camera:camera-video", version.ref = "camera" }
# CameraX Lifecycle library
androidx-camera-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "camera" }
# CameraX View class
androidx-camera-view = { module = "androidx.camera:camera-view", version.ref = "camera" }
# CameraX Extensions library
androidx-camera-ext = { module = "androidx.camera:camera-extensions", version.ref = "camera" }
androidx-exifinterface = { module = "androidx.exifinterface:exifinterface", version.ref = "exifinterface" }

#=============================
#===== Android Lifecycle =====
#=============================
# ViewModel
lifecycle-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
# LiveData
lifecycle-livedata = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
# optional - helpers for implementing LifecycleOwner in a Service
lifecycle-service = { module = "androidx.lifecycle:lifecycle-service", version.ref = "lifecycle" }
# Lifecycles only (without ViewModel or LiveData)
lifecycle-runtime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
# Saved state module for ViewModel
lifecycle-viewmodel-savedstate = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "lifecycle" }

#===========================
#===== Android Room ========
#===========================
room-runtime = { module = "androidx.room:room-runtime", version.ref = "room" }
# ksp
room-compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
# optional - Kotlin Extensions and Coroutines support for Room
room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
# optional - RxJava support for Room
#room-rxjava2 = { module = "androidx.room:room-rxjava2", version.ref = "room" }

#===========================
#===== Android Compose =====
#===========================
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity-compose" }
compose-material = { module = "androidx.compose.material:material", version.ref = "compose" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
compose-ui = { module = "androidx.compose.ui:ui", version.ref = "compose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }

#=======================
#===== Third party =====
#=======================
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
# https://github.com/Kotlin/dokka
dokka-gradle-plugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }
dokka-core = { module = "org.jetbrains.dokka:dokka-core", version.ref = "dokka" }
square-moshi = { module = "com.squareup.moshi:moshi", version.ref = "square-moshi" }
square-okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "square-okhttp" }
square-okhttp-LogInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "square-okhttp" }
square-okhttp-mock = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "square-okhttp" }
square-retrofit2 = { module = "com.squareup.retrofit2:retrofit", version.ref = "square-retrofit2" }
square-retrofit2-gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "square-retrofit2" }
square-retrofit2-moshi = { module = "com.squareup.retrofit2:converter-moshi", version.ref = "square-retrofit2" }
square-retrofit2-converter-scalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "square-retrofit2" }
square-retrofit2-adapter-rxjava2 = { module = "com.squareup.retrofit2:adapter-rxjava2", version.ref = "square-retrofit2" }
rxjava2-java = { module = "io.reactivex.rxjava2:rxjava", version.ref = "rxjava2" }
rxjava2-android = { module = "io.reactivex.rxjava2:rxandroid", version.ref = "rxjava2-android" }
rxjava3-java = { module = "io.reactivex.rxjava3:rxjava", version.ref = "rxjava3" }
rxjava3-android = { module = "io.reactivex.rxjava3:rxandroid", version.ref = "rxjava3-android" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
coil = { module = "io.coil-kt:coil", version.ref = "coil" }
coil-gif = { module = "io.coil-kt:coil-gif", version.ref = "coil" }
coil-svg = { module = "io.coil-kt:coil-svg", version.ref = "coil" }
coil-video = { module = "io.coil-kt:coil-video", version.ref = "coil" }
glide = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
glide-ksp = { module = "com.github.bumptech.glide:ksp", version.ref = "glide" }
# ksp(libs.glide.compiler)
glide-compiler = { module = "com.github.bumptech.glide:compiler", version.ref = "glide" }
glide-okhttp3 = { module = "com.github.bumptech.glide:okhttp3-integration", version.ref = "glide" }
# https://github.com/wasabeef/glide-transformations
glide-transformations = { module = "jp.wasabeef:glide-transformations", version.ref = "glide-transformations" }
flycoTabLayout = { module = "com.flyco.tablayout:FlycoTabLayout_Lib", version.ref = "flyco-tablayout" }
srl-footer = { module = "com.scwang.smart:refresh-footer-classics", version.ref = "srl" }
srl-header = { module = "com.scwang.smart:refresh-header-classics", version.ref = "srl" }
srl-kernel = { module = "com.scwang.smart:refresh-layout-kernel", version.ref = "srl" }
jacoco = { module = "org.jacoco:org.jacoco.core", version.ref = "jacoco" }
eventbus = { module = "org.greenrobot:eventbus", version.ref = "eventbus" }
netty-codec-http = { module = "io.netty:netty-codec-http", version.ref = "netty" }
netty-handler = { module = "io.netty:netty-handler", version.ref = "netty" }
netty-all = { module = "io.netty:netty-all", version.ref = "netty" }
koin = { module = "io.insert-koin:koin-android", version.ref = "koin" }
# https://mvnrepository.com/artifact/org.bytedeco/ffmpeg
# In module `build.gradle.kts`
# dependencies {
#     implementation(libs.bytedeco.ffmpeg)
#     implementation(libs.bytedeco.ffmpeg) {
#         artifact {
#             classifier = "android-arm64"
#         }
#     }
# }
bytedeco-ffmpeg = { module = "org.bytedeco:ffmpeg", version.ref = "bytedeco-ffmpeg" }
# https://mvnrepository.com/artifact/org.bytedeco/javacpp
# In module `build.gradle.kts`
# dependencies {
#     implementation(libs.bytedeco.javacpp)
#     implementation(libs.bytedeco.javacpp) {
#         artifact {
#             classifier = "android-arm64"
#         }
#     }
# }
bytedeco-javacpp = { module = "org.bytedeco:javacpp", version.ref = "bytedeco-javacpp" }
material-dialogs = { module = "com.afollestad.material-dialogs:input", version.ref = "material-dialogs" }
karn-notify = { module = "io.karn:notify", version.ref = "karn-notify" }
xx-permissions = { module = "com.github.getActivity:XXPermissions", version.ref = "xx-permissions" }
mmkv = { module = "com.tencent:mmkv", version.ref = "mmkv" }
# In module `build.gradle.kts`
# dependencies {
#     implementation(libs.android.animations) {
#         artifact {
#             type = "aar"
#         }
#     }
# }
android-animations = { module = "com.daimajia.androidanimations:library", version.ref = "android-animations" }
java-mail = { module = "com.sun.mail:android-mail", version.ref = "java-mail" }
java-activation = { module = "com.sun.mail:android-activation", version.ref = "java-mail" }
# By using netty,
# no need to use this library when adding pipeline however we indeed need its library.
# So what's the magic?
# https://mvnrepository.com/artifact/com.jcraft/jzlib
jzlib = { module = "com.jcraft:jzlib", version.ref = "jzlib" }
# As of bson4jackson 2.13.0, you need add fasterxml jackson manually.
bson = { module = "de.undercouch:bson4jackson", version.ref = "bson" }
fasterxml-jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "fasterxml" }
fasterxml-jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "fasterxml" }
fasterxml-jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "fasterxml" }
free-reflection = { module = "com.github.tiann:FreeReflection", version.ref = "free-reflection" }
androidasync = { module = "com.koushikdutta.async:androidasync", version.ref = "androidasync" }
net = { module = "com.github.liangjingkanji:Net", version.ref = "net" }
subsampling-scale-image-view = { module = "com.davemorrissey.labs:subsampling-scale-image-view-androidx", version.ref = "subsampling-scale-image-view" }

#================
#===== Test =====
#================
# testImplementation
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "jupiter" }
# testRuntimeOnly
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "jupiter" }
# (Optional) If you need "Parameterized Tests"
# testImplementation
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "jupiter" }
# testRuntimeOnly
junit-vintage-engine = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "jupiter" }
kotlin-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }
espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso-core" }
androidx-test-core = { module = "androidx.test:core", version.ref = "androidx-test" }
androidx-test-core-ktx = { module = "androidx.test:core-ktx", version.ref = "androidx-test" }
androidx-test-rules = { module = "androidx.test:rules", version.ref = "androidx-test" }
androidx-test-runner = { module = "androidx.test:runner", version.ref = "androidx-test-runner" }
androidx-test-ext-junit = { module = "androidx.test.ext:junit", version.ref = "androidx-test-ext" }
androidx-test-ext-junit-ktx = { module = "androidx.test.ext:junit-ktx", version.ref = "androidx-test-ext" }
test-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kluent-android = { module = "org.amshove.kluent:kluent-android", version.ref = "kluent" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
arch = { module = "androidx.arch.core:core-testing", version.ref = "arch" }
compose-ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "compose" }
compose-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "compose" }
square-okhttp-mockjunit5 = { module = "com.squareup.okhttp3:mockwebserver3-junit5", version.ref = "square-okhttp" }
powermock-junit4 = { module = "org.powermock:powermock-module-junit4", version.ref = "powermock-version" }
powermock-core = { module = "org.powermock:powermock-core", version.ref = "powermock-version" }
powermock-api = { module = "org.powermock:powermock-api-mockito2", version.ref = "powermock-version" }
robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric-version" }
mars-xlog = { module = "com.tencent.mars:mars-xlog", version.ref = "mars-xlog" }
# androidTestImplementation
mannodermaus-junit5-core = { module = "de.mannodermaus.junit5:android-test-core", version.ref = "mannodermaus-junit5" }
# androidTestRuntimeOnly
mannodermaus-junit5-runner = { module = "de.mannodermaus.junit5:android-test-runner", version.ref = "mannodermaus-junit5" }

#===================#===================#===================#===================
#===================#===================#===================#===================
#===================#===================#===================#===================

[bundles]
androidx-full = [
    "androidx-core-ktx",
    "androidx-appcompat",
    "androidx-annotation",
    "androidx-constraintlayout",
    "androidx-coordinatorlayout",
    "androidx-recyclerview",
    "androidx-cardview",
    "androidx-fragment",
    "androidx-viewpager2"
]
androidx-main = [
    "androidx-core-ktx",
    "androidx-appcompat",
    "androidx-annotation",
    "androidx-constraintlayout",
    "androidx-recyclerview",
    "androidx-cardview",
    "androidx-fragment"
]
androidx-simple = [
    "androidx-core-ktx",
    "androidx-appcompat",
    "androidx-annotation",
    "androidx-constraintlayout"
]
kotlin-coroutines = ["kotlin-coroutines-core" ,"kotlin-coroutines-android"]
navigation = ["androidx-navigation-fragment", "androidx-navigation-ui"]
lifecycle-full = [
    "lifecycle-viewmodel",
    "lifecycle-livedata",
    "lifecycle-service",
    "lifecycle-viewmodel-savedstate"
]
lifecycle-simple = [
    "lifecycle-viewmodel",
    "lifecycle-livedata"
]
room = ["room-runtime", "room-ktx"]
coil = ["coil", "coil-gif", "coil-svg", "coil-video"]
glide = ["glide", "glide-okhttp3", "glide-transformations"]
srl = ["srl-kernel", "srl-header", "srl-footer"]
java-mail = ["java-mail", "java-activation"]
fasterxml = [
    "fasterxml-jackson-core",
    "fasterxml-jackson-databind",
    "fasterxml-jackson-annotations"
]
# As of bson4jackson 2.13.0, you need add fasterxml jackson manually.
bson = [
    "bson",
    "fasterxml-jackson-core",
    "fasterxml-jackson-databind",
    "fasterxml-jackson-annotations"
]
square-retrofit2 = [
    "square-retrofit2",
    "square-retrofit2-gson",
    "square-retrofit2-moshi",
    "square-retrofit2-converter-scalars",
    "square-retrofit2-adapter-rxjava2",
]
camerax = [
    "androidx-camera-core",
    "androidx-camera-camera2",
    "androidx-camera-video",
    "androidx-camera-lifecycle",
    "androidx-camera-view",
    "androidx-camera-ext"
]
test = [
    "junit-jupiter-api",
    "junit-jupiter-params",
    "kotlin-junit5",
    "mockk",
    "test-coroutines",
    "kluent-android",
    "arch",
    "robolectric"
]
android-test = [
    "androidx-test-core",
    "androidx-test-core-ktx",
    "androidx-test-runner",
    "androidx-test-ext-junit-ktx",
    "espresso-core"]
test-runtime-only = ["junit-jupiter-engine", "junit-vintage-engine"]
powermock = [
    "powermock-junit4",
    "powermock-core",
    "powermock-api"
]

#===================#===================#===================#===================
#===================#===================#===================#===================
#===================#===================#===================#===================

[plugins]
# Equivalent agp - com.android.tools.build:gradle
android-application = { id = "com.android.application", version.ref = "agp" }
# Equivalent kgp - org.jetbrains.kotlin:kotlin-gradle-plugin
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
android-library = { id = "com.android.library", version.ref = "agp" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
kotlin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }

navigation = { id = "androidx.navigation.safeargs.kotlin", version.ref = "navigation" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
ktlint-gradle = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint-gradle" }
benmanes-versions = { id = "com.github.ben-manes.versions", version.ref = "benmanes" }
# vcu = { id = "nl.littlerobots.version-catalog-update", version.ref = "vcu" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
android-junit5 = { id = "de.mannodermaus.android-junit5", version.ref = "mannodermaus-android-junit5" }
