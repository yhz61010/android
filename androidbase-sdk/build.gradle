apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1
        versionName "1.0"

        consumerProguardFiles 'consumer-rules.pro'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "$rootProject.ext.java_version"
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api "androidx.core:core-ktx:$rootProject.ext.coreKtxVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.coroutines_version"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.ext.archLifecycleVersion"
    api "androidx.lifecycle:lifecycle-livedata-core-ktx:$rootProject.ext.archLifecycleVersion"
    // ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.ext.archLifecycleVersion"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$rootProject.ext.archLifecycleVersion"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$rootProject.ext.archLifecycleVersion"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$rootProject.ext.archLifecycleVersion"
    implementation "com.google.android.material:material:$materialVersion"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.ext.androidTestRunnerVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.androidTestExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powermockVersion"
    testImplementation "org.powermock:powermock-core:$rootProject.ext.powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powermockVersion"

    // EXIF Interface
    api "androidx.exifinterface:exifinterface:$rootProject.ext.exifinterfaceVersion"
    api group: 'com.squareup.okhttp3', name: 'okhttp', version: "$rootProject.ext.okhttpVersion"
    api group: 'io.reactivex.rxjava2', name: 'rxjava', version: "$rootProject.ext.rxjava2RxjavaVersion"
    api group: 'io.reactivex.rxjava2', name: 'rxandroid', version: "$rootProject.ext.rxjava2RxAndroidVersion"
    api group: 'com.squareup.retrofit2', name: 'retrofit', version: "$rootProject.ext.retrofit2Version"
    api "com.squareup.retrofit2:converter-scalars:$rootProject.ext.retrofit2Version"
    api "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofit2Version"
    api "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.retrofit2Version"
    api group: 'com.google.code.gson', name: 'gson', version: "$rootProject.ext.gsonVersion"
}