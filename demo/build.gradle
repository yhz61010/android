apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.leovp.leoandroidbaseutil"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        ndk {
            // abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
            abiFilters "armeabi-v7a"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'

            v1SigningEnabled true
            v2SigningEnabled true
        }

        release {
            storeFile file(System.getenv("KEYSTORE") ?: "../debug.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: 'android'
            keyAlias System.getenv("KEY_ALIAS") ?: 'androiddebugkey'
            keyPassword System.getenv("KEY_PASSWORD") ?: 'android'

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'default'

    productFlavors {
        develop {
            dimension = 'default'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "$rootProject.ext.java_version"
    }

    packagingOptions {
        // This line is for room
        exclude 'META-INF/atomicfu.kotlin_module'
//        exclude 'META-INF/LICENSE'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/NOTICE.md'
        pickFirst 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/DEPENDENCIES.md'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/LICENSE.md'
        pickFirst 'META-INF/LICENSE.txt' // picks the JavaMail license file
        pickFirst 'lib/x86/libstlport_shared.so'
        pickFirst 'lib/x86_64/libstlport_shared.so'
        pickFirst 'lib/armeabi/libstlport_shared.so'
        pickFirst 'lib/armeabi-v7a/libstlport_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        // The following lines are for ffmpeg
        pickFirst 'META-INF/native-image/linux-x86/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/linux-x86/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/linux-x86_64/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/linux-x86_64/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/linux-ppc64le/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/linux-ppc64le/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/linux-arm64/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/linux-arm64/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/linux-armhf/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/linux-armhf/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/android-arm/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/android-arm/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/android-arm64/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/android-arm64/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/android-x86/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/android-x86/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/android-x86_64/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/android-x86_64/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/macosx-x86_64/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/macosx-x86_64/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/windows-x86/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/windows-x86/jnijavacpp/reflect-config.json'
        pickFirst 'META-INF/native-image/windows-x86_64/jnijavacpp/jni-config.json'
        pickFirst 'META-INF/native-image/windows-x86_64/jnijavacpp/reflect-config.json'

        pickFirst "lib/armeabi-v7a/libavutil.so"
        pickFirst "lib/armeabi-v7a/libavcodec.so"
        pickFirst "lib/armeabi-v7a/libadpcm-ima-qt.so"
        pickFirst "lib/armeabi-v7a/libc++_shared.so"

        pickFirst "lib/arm64-v8a/libavutil.so"
        pickFirst "lib/arm64-v8a/libavcodec.so"
        pickFirst "lib/arm64-v8a/libadpcm-ima-qt.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apkFileName = "LeoDemo-${variant.flavorName}-${buildType.name}-v${variant.versionName}(${variant.versionCode}).apk"
            outputFileName = apkFileName
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/libs']
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardviewVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerviewVersion"
    implementation "androidx.core:core-ktx:$rootProject.ext.coreKtxVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintlayoutVersion"
    implementation "androidx.multidex:multidex:$rootProject.ext.multidexVersion"
    implementation "com.google.android.material:material:$rootProject.ext.materialVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"

    // ===== Room - Start
    implementation "androidx.room:room-runtime:$roomVersion"
    // For Kotlin use kapt instead of annotationProcessor
    kapt "androidx.room:room-compiler:$roomVersion"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$roomVersion"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$roomVersion"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$roomVersion"
    // ===== Room - End

    // Lifecycle components
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"

    implementation "com.tencent.mars:mars-xlog:$rootProject.ext.marsXlogVersion"

    implementation project(':androidbase-sdk')
    implementation project(':audio-sdk')
//    implementation project(':adpcm-ima-qt-sdk')
    implementation project(':ffmpeg-sdk')
    implementation project(':basenetty-sdk')
    implementation project(':camera2live-sdk')
    implementation project(':screencapture-sdk')
    implementation project(':drawOnScreen-sdk')

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.androidTestExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.espressoVersion"

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

    implementation "com.afollestad.material-dialogs:input:$materialDialogVersion"
    implementation "org.kodein.di:kodein-di-framework-android-x:$rootProject.ext.kodeinVersion"
    implementation "org.greenrobot:eventbus:$eventbusVersion"
    implementation "io.karn:notify:$karnNotifyVersion"
    implementation "com.daimajia.androidanimations:library:${viewanimatorVersion}@aar"

    implementation "com.hjq:xxpermissions:$xxPermissionVersion"
    implementation "com.tencent:mmkv-static:$mmkvVersion"

    implementation "com.sun.mail:android-mail:$javaMailVersion"
    implementation "com.sun.mail:android-activation:$javaMailVersion"
}
